let aws = require('aws-sdk')
let semver = require('semver')
let tiny = require('tiny-json-http')
let regions = require('./supported-regions')

// run if directly invoked
if (require.main === module) {
  ;(async function() {
    let md = '# DenoRuntime Lambda Layer\n\n'
    md += `> this readme was generated by scripts/update-readme.js\n\n`
    for (let region of regions) {
      let values = await getAllVersions(region)
      if (values.length) {
        md += `## ${ region }\n`
        for (let layer of values) {
          md += `- <strong>${layer.version}</strong> `
          md += `<code>${layer.arn}</code>\n`
        }
        md += `\n`
      }
    }
    await write(md)
  })();
}

// export helpers for testing
module.exports = {
  dedupe, write, getAllVersions
}

/** get all the DenoRuntime layer versions for given region */
async function getAllVersions(region) {
  let results = []
  let lambda = new aws.Lambda({ region })
  let params = {LayerName: 'DenoRuntime'}
  async function getPage(params) {
    // get the raw versions result
    let result = await lambda.listLayerVersions(params).promise()
    // helper to format to {arn, version}
    let fmt = v=> ({arn: v.LayerVersionArn, version: v.Description})
    // helper to filter to good versions
    let ok = v=> semver.valid(v.version)
    // map/filter results
    results = results.concat(result.LayerVersions.map(fmt).filter(ok))
    if (result.NextMarker) {
      params.Marker = result.NextMarker
      await getPage(params)
    }
  }
  // kick off read
  await getPage(params)
  // clean up duplicates in results
  return dedupe(results)
}

/** helper to write the readme using the github api */
async function write(md) {

  let headers = {
    authorization: `token ${ process.env.GITHUB_TOKEN }`,
    accept: 'application/vnd.github.v3+json'
  }

  // get the sha of the readme
  let { body } = await tiny.get({
    url: `https://api.github.com/repos/beginner-corp/begin-deno-runtime/readme`,
    headers,
  }) 

  // write the readme
  return tiny.put({
    url: `https://api.github.com/repos/beginner-corp/begin-deno-runtime/contents/readme.md`,
    headers,
    data: {
      sha: body.sha,
      message: `update readme`,
      content: Buffer.from(md).toString('base64')
    }
  })
}

/** helper to dedupe results */
function dedupe(values) {
  let obj = values.slice(0).reduce(function fold (a, v) {
    let region = v.arn.split(':')[3]
    let denoVersion = v.version
    let layerVersion = v.arn.split(':').pop()
    if (!a[denoVersion])
      a[denoVersion] = v.arn
    return a
  }, {})
  let result = []
  for (let version of Object.keys(obj))
    result.push({ arn: obj[version], version: version })
  return result
}
